/* $Id: dialog.cpp 50956 2011-08-30 19:41:22Z mordante $ */
/*
   Copyright (C) 2008 - 2011 by Mark de Wever <koraq@xs4all.nl>
   Part of the Battle for Wesnoth Project http://www.wesnoth.org/

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY.

   See the COPYING file for more details.
*/

#define GETTEXT_DOMAIN "rose-lib"

#include "gui/dialogs/dialog.hpp"

#include "gui/widgets/integer_selector.hpp"
#include "gui/widgets/report.hpp"
#include "gui/widgets/toggle_button.hpp"
#include "gui/widgets/window.hpp"
#include "gui/dialogs/visual_layout.hpp"
#include "video.hpp"
#include "gettext.hpp"
#include "display.hpp"

#include <boost/foreach.hpp>

extern Uint32 dbg_start_ticks;
extern bool dbg_enable;

namespace gui2 {

tdialog::~tdialog()
{
	if (async_window_) {
		delete async_window_;
	}
}

bool tdialog::show(CVideo& video, const unsigned auto_close_time, const unsigned explicit_x, const unsigned explicit_y)
{
	// hide unit tip if necessary.
	if (display::get_singleton()) {
		display::get_singleton()->hide_tip();
	}

	std::vector<twindow*> connected = gui2::connectd_window();
	if (!connected.empty()) {
		connected.back()->remove_tooltip();
	}

	{
		std::auto_ptr<twindow> window(build_window(video, explicit_x, explicit_y));
		VALIDATE(window.get(), null_str);

		try {
			post_build(video, *window);

			window->set_owner(this);

			init_fields(*window);

			pre_show(video, *window);

			window->set_transition(video.getSurface(), SDL_GetTicks());

			retval_ = window->show(restore_, auto_close_time);

			post_show(*window);

		} catch (twindow::tlayout_exception& e) {
			if (window->id() != twindow::visual_layout_id) {
				gui2::tvisual_layout dlg(*display::get_singleton(), e.target, e.reason);
				dlg.show(video);
				throw CVideo::quit();

			} else {
				throw twml_exception(null_str, e.reason);
			}
		}
	}
	connected = gui2::connectd_window();
	if (!connected.empty() && connected.back()->is_theme()) {
		display::get_singleton()->invalidate_all();
	}

	return retval_ == twindow::OK;
}

void tdialog::asyn_show(CVideo& video, const SDL_Rect& map_area)
{
	twindow* window = build_window(video, 0, 0);
	// below code mybe exception, destruct can relase, evalue async_window at first.
	async_window_ = window;

	post_build(video, *window);

	window->set_owner(this);
	volatiles_ = window->set_fix_coordinate(map_area);

	pre_show(video, *window);

	// window->set_transition(twindow::last_frame_buffer, SDL_GetTicks());
	retval_ = window->asyn_show();

	window->layout();
}

void tdialog::async_draw()
{
	async_window_->draw();
}

twindow* tdialog::build_window(CVideo& video, const unsigned explicit_x, const unsigned explicit_y) const
{
	if (window_id() == "more") {
		int ii = 0;
		dbg_enable = true;
		dbg_start_ticks = SDL_GetTicks();
	}

	return build(video, window_id(), explicit_x, explicit_y);
}

void tdialog::init_fields(twindow& window)
{
	if(!focus_.empty()) {
		if(twidget* widget = window.find(focus_, false)) {
			window.keyboard_capture(widget);
		}
	}
}

void tdialog::toggle_report(twidget* widget)
{
	treport* bar = treport::get_report(widget);
	bar->select(widget);
}

} // namespace gui2


/*WIKI
 * @page = GUIWindowDefinitionWML
 * @order = 1
 *
 * {{Autogenerated}}
 *
 * = Window definition =
 *
 * The window definition define how the windows shown in the dialog look.
 */

/*WIKI
 * @page = GUIWindowDefinitionWML
 * @order = ZZZZZZ_footer
 *
 * [[Category: WML Reference]]
 * [[Category: GUI WML Reference]]
 */

